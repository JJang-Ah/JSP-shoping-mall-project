/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-06-12 14:24:47 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mall;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.*;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import manager.product.*;
import mall.member.*;
import review.*;

public final class shopContent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("manager.product");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("mall.member");
    _jspx_imports_packages.add("review");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.text.DecimalFormat");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상품 상세보기</title>\r\n");
      out.write("<style>\r\n");
      out.write(".container { width: 1200px; margin: 0 auto;}\r\n");
      out.write(".d_kind { margin: 20px 0;}\r\n");
      out.write(".d_kind a { text-decoration: none; color: black; font-size: 18px; color: #32708d;}\r\n");
      out.write(".d_kind:hover { text-shadow: 1px 1px 1px lightgray;}\r\n");
      out.write("/* 구역1: 왼쪽 상단, 상품 이미지 */\r\n");
      out.write(".s1 { width: 50%; float: left; text-align: center;}\r\n");
      out.write(".big_img { transition: 0.5s;}\r\n");
      out.write(".big_img:hover { transform: scale(1.01);}\r\n");
      out.write(".small_imgs { margin: 20px;}\r\n");
      out.write(".small_imgs img { margin: 0 10px; cursor: pointer; border: 2px solid #fff; transition: 0.5s;}\r\n");
      out.write(".small_imgs .thumb:hover { transform: scale(1.05);}\r\n");
      out.write("\r\n");
      out.write("/* 구역2: 오른쪽 상단, 상품 기본 정보, 버튼 */\r\n");
      out.write(".s2 { width: 44%; float: left; background: #f8f9fa; padding: 30px;}\r\n");
      out.write(".s2 > div { margin-bottom: 23px;}\r\n");
      out.write(".s2_d1 { font-size: 1.5em; font-weight: bold; color: #32708d;}\r\n");
      out.write(".s2_d2 { font-size: 0.9em; colot: gray;}\r\n");
      out.write(".s2 .ss { display: inline-block; width: 100px; font-size: 0.9em; color: gray;}\r\n");
      out.write(".s2_d3 span:nth-child(2) { font-weight: bold; color: gray;}\r\n");
      out.write(".s2_d4 span:nth-child(2), .s2_d5 span:nth-child(2) { color: #c84557;}\r\n");
      out.write(".s2_d4 b { font-size: 1.5em;}\r\n");
      out.write(".s2_d7 span:not(.ss) { font-size: 0.9em; color: gray;}\r\n");
      out.write(".s2_d6 b { font-size: 1.05em; color: #1e94be;}\r\n");
      out.write(".s2_d7 span:nth-child(3) { font-size: 0.9em; color: gray;}\r\n");
      out.write(".btns { margin-top: 40px; text-align: center;}\r\n");
      out.write(".btns input { width: 250px; height: 60px; border: 0; font-size: 1.1em; cursor: pointer;}\r\n");
      out.write(".btns #btn_cart { background: #2f9e77; color: #fff; margin-right: 10px;}\r\n");
      out.write(".btns #btn_cart:hover { background: #fff; color: #2f9e77; border: 2px solid #2f9e77; font-weight: bold;}\r\n");
      out.write(".btns #btn_buy { background: #1e9faa; color: #fff; margin-left: 10px;}\r\n");
      out.write(".btns #btn_buy:hover { background: #fff; color: #2f9e77; border: 2px solid #2f9e77; font-weight: bold;}\r\n");
      out.write("\r\n");
      out.write("/* 구역3: 하단, 상품 내용, 상품 리뷰 */\r\n");
      out.write(".t_line { border: 1px solid #eec9ef; margin: 30px 0; clear: both;}\r\n");
      out.write(".s3 { clear: both;}\r\n");
      out.write(".s3_c1 { background: #32708d; padding: 10px; border-radius: 5px; margin-bottom: 30px;}\r\n");
      out.write(".s3_c1 span { display: inline-block; width: 120px; height: 30px; padding: 20px; \r\n");
      out.write("margin: 20px 20px; text-align: center; line-height: 30px; border-radius: 5px; color: #fff; font-size: 1.1em; cursor: pointer;}\r\n");
      out.write(".s3_c1 span:hover { border: 2px solid #fff;	text-shadow:  1px 1px 2px beige;}\r\n");
      out.write(".s3_c2 { line-height: 40px; text-align: justify; padding: 20px;}\r\n");
      out.write("\r\n");
      out.write(".s3_c3 .s3_review { padding: 20px; line-height: 20px; text-align: justify; width: 100%; height: 200px; margin-bottom: 40px;}\r\n");
      out.write(".s3_review .s3_r1 { width: 70%; float: left; border: 1px solid gray; padding: 20px; background: #f0f0f0; margin-right: 20px;}\r\n");
      out.write(".s3_r1 .s3_subject { font-size: 1.1em; font-weight: bold; margin-bottom: 10px;}\r\n");
      out.write(".s3_r1 .s3_content { width: 100%; height: 110px; white-space: pre-line; overflow: hidden;}\r\n");
      out.write(".s3_r1 .s3_content_all, .s3_r1 .s3_content_part { font-size: 0.9em; color: #1e94be; cursor: pointer;}\r\n");
      out.write(".s3_review .s3_r2 { width: 16%; float: right; border: 1px solid gray; padding: 20px; background: #f8f9fa;}\r\n");
      out.write("\r\n");
      out.write(".s3_r2 {font-size: 0.9em; color: gray; height: 180px;}\r\n");
      out.write("/* 하단 - 페이징 영역*/\r\n");
      out.write("#paging { text-align: center; margin-top: 20px;}\r\n");
      out.write("#paging a { color: #000;}\r\n");
      out.write("#pBox { display: inline-block; width: 22px; height: 22px; padding: 5px; margin: 5px;}\r\n");
      out.write("#pBox:hover { background: #f1617d; color: white; font-weight: bold; border-radius: 50%;}\r\n");
      out.write(".pBox_c { background: #f1617d; color: white; font-weight: 900; border-radius: 50%;}\r\n");
      out.write(".pBox_b { font-weight: 900;}\r\n");
      out.write("\r\n");
      out.write(".main_end { margin: 50px 0 40px 0;}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("	document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("// 		// 이미지 변화 효과 \r\n");
      out.write("		let big_img = document.querySelector(\".big_img\");\r\n");
      out.write("		let thumb_imgs = document.querySelectorAll(\".thumb\");\r\n");
      out.write("		for(let thumb of thumb_imgs) {\r\n");
      out.write("			thumb.addEventListener(\"click\", function() {\r\n");
      out.write("				big_img.src = thumb.src;\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		// 상품 수량을 1이상 100 미만으로 제한하는 효과\r\n");
      out.write("		let buy_count = document.getElementById(\"buy_count\");\r\n");
      out.write("		buy_count.addEventListener(\"keyup\", function(event) {\r\n");
      out.write("			if(buy_count.value < 1) {\r\n");
      out.write("				buy_count.value = 1;\r\n");
      out.write("			} else if(buy_count.value.length > 100) {\r\n");
      out.write("				buy_count.value = 100;\r\n");
      out.write("			}\r\n");
      out.write("		})\r\n");
      out.write("		// 하단 - 상세설명, 상품리뷰 변환 효과\r\n");
      out.write("		let s3_c2 = document.querySelector(\".s3_c2\");\r\n");
      out.write("		let s3_c3 = document.querySelector(\".s3_c3\");\r\n");
      out.write("		let ss1 = document.querySelector(\".ss1\");\r\n");
      out.write("		let ss2 = document.querySelector(\".ss2\");\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 내용 전체보기 효과\r\n");
      out.write("		let content = document.querySeletorAll(\".s3_content\");\r\n");
      out.write("		let content_all = document.querySelectorAll(\".s3_content_all\");\r\n");
      out.write("		let content_part = document.querySelectorAll(\".s3_content_part\");\r\n");
      out.write("		for(let i in content_all) {\r\n");
      out.write("			content_all[i].addEventListener(\"click\", function() {\r\n");
      out.write("				content[i].style.overflow = \"visible\";\r\n");
      out.write("				content[i].style.height = \"200px\";\r\n");
      out.write("				content[i].style.display = \"block\";\r\n");
      out.write("				content_part[i].style.display = \"block\";\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("</script>\r\n");

String memberId = (String)session.getAttribute("memberId");
int product_id = Integer.parseInt(request.getParameter("product_id"));
String product_kind = request.getParameter("product_kind");


// 상품 DB 연결, 질의
ProductDAO productDAO = ProductDAO.getInstance();
ProductDTO product = productDAO.getProduct(product_id);

// 회원 DB 연결, 질의 - 세션의 여부 확인(로그인)
MemberDAO memberDAO = null;
MemberDTO member = null;
String name = "";
String address = "";
String local = "";
String d_day = "";

if(memberId != null) {
	memberDAO = MemberDAO.getInstance();
	member = memberDAO.getMember(memberId);
	name = member.getName();
	address = member.getAddress();
	local = address.substring(0, 2); // 주소에서 지역 2글자만 추출, ex) 서울, 경기, 대구 ...


	// 배송 날짜 계산과 포맷
	// 규칙1. 서울 - 다음날 배송, 경기: 2일 안에 배송, 지방: 3일 안에 배송, 제주도: 10일 안에 배송 
	// 규칙2. 오전12시 이전이면 규칙1를 적용, 오전12시 이후면 규칙2에 1일을 더해서 적용
	// 규칙3. 토요일, 일요일은 제외
	// 현재날짜와 시간, 12시 이전 이후, 주소 판단, 요일 판단 
	int n = 0; // 추가되는 날짜
	Calendar c = Calendar.getInstance();

	int w = c.get(Calendar.DAY_OF_WEEK); // 1: 일요일, 2: 월요일 ... 7: 토요일

	switch(local) {
	case "서울": 
		if(w >= 2 && w <= 5) n++;
		else if(w == 6 || w == 7) n+=3;
		else if(w == 1) n += 2;
		
		break;
	case "경기":
		if(w >= 2 && w <= 4) n+=2;
		else if(w >= 5 && w <= 7) n+=4;
		else if(w ==1) n+=3;
		break;
	case "제주":
		n += 7;
		break;
	default: // 지방
		if(w == 2 || w == 3) n+=3;
		else if(w >= 4 && w <= 7) n += 5;
		else if(w == 1) n += 4;
		break;
	}
	
	// 추가된 일수를 더한 날짜
	c.add(Calendar.DATE, n);
	int month = c.get(Calendar.MONTH) + 1; // 0~11로 표현되기 때문에  1을 더해서 보정
	int date = c.get(Calendar.DATE);
	int week = c.get(Calendar.DAY_OF_WEEK);
	String[] weekday = {"", "일", "월", "화", "수", "목", "금", "토"};
	d_day = month + "월 " + date + "일";
}



SimpleDateFormat sdf = new SimpleDateFormat("yyyy년 MM월 dd일");
DecimalFormat df = new DecimalFormat("#,###,###");



//################ 페이징(paging) 처리 
//페이징(paging) 처리를 위한 변수 선언
int pageSize = 5; // 1페이지에 12건의 게시글을 표시
String pageNum = request.getParameter("pageNum");
if(pageNum == null) pageNum = "1";

int currentPage = Integer.parseInt(pageNum); // 현재 페이지
int startRow = (currentPage -1) * pageSize + 1; // 현재 페이지의 첫번째 행
int endRow = currentPage * pageSize;    // 현재 페이지의 마지막 행

//################


// 리뷰 DB 연결, 질의
ReviewDAO reviewDAO = ReviewDAO.getInstance();
List<ReviewDTO> reviewList = reviewDAO.getReviewList(1, 5, product_id);
int cnt = reviewDAO.getReviewCount(product_id);


// 상품 붐류별 상품명 설정
String product_kindName = "";
switch(product.getProduct_kind()) {
case "110": product_kindName = "텐트"; break;
case "120": product_kindName = "텐트관련품"; break;
case "130": product_kindName = "타프"; break;
case "140": product_kindName = "폴대/펙/스트링/스토퍼"; break;
case "150": product_kindName = "공구"; break;
case "160": product_kindName = "기타(텐트/타프)"; break;
case "210": product_kindName = "의자"; break;
case "220": product_kindName = "테이블"; break;
case "230": product_kindName = "선반/수납기구"; break;
case "240": product_kindName = "야전침대"; break;
case "250": product_kindName = "퍼니쳐"; break;
case "260": product_kindName = "기타(의자/테이블/침대)"; break;

case "310": product_kindName = "버너"; break;
case "320": product_kindName = "코펠"; break;
case "330": product_kindName = "취사용품"; break;
case "340": product_kindName = "식기류"; break;
case "350": product_kindName = "기타(버너/코펠/취사용품)"; break;

case "410": product_kindName = "랜턴"; break;
case "420": product_kindName = "후레쉬"; break;
case "430": product_kindName = "난로"; break;
case "440": product_kindName = "액세서리"; break;
case "450": product_kindName = "기타(랜턴/난로)"; break;
case "460": product_kindName = "기타(의자/테이블/침대)"; break;

case "510": product_kindName = "화로대"; break;
case "520": product_kindName = "바베큐 그릴"; break;
case "530": product_kindName = "토치"; break;
case "540": product_kindName = "바베큐 소품"; break;
case "550": product_kindName = "기타(화로/바베큐)"; break;

case "610": product_kindName = "침낭"; break;
case "620": product_kindName = "베개/쿠션/방석"; break;
case "630": product_kindName = "매트"; break;
case "640": product_kindName = "해먹"; break;
case "650": product_kindName = "커버"; break;
case "660": product_kindName = "기타(침낭/매트/해먹)"; break;
}

// 판매가 계산
int price = product.getProduct_price();
int d_rate = product.getDiscount_rate();
int sale_price = price*(100-d_rate)/100; 

// 개인 쇼핑몰에서 이미지가 5장이고, 1번만 not null이고, 나머지는 nothing.jpg가 저장되어 있다고 가정 할 때
/*
String product_image1 = product.getProduct_image1();
if(product.getProduct_image2().equals("nothing.jpg")) product.setProduct_image2(product_image1);
*/

      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "shopTop.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"d_kind\"><a href=\"shopAll.jsp#t_kind\">홈</a>&ensp;>&ensp;<a href=\"shopAll.jsp?product_kind=");
      out.print(product.getProduct_kind() );
      out.write("#t_kind\">");
      out.print(product_kindName );
      out.write("</a>&ensp;>&ensp;<a href=\"\"></a></div>\r\n");
      out.write("	<div class=\"detail\">\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<div class=\"s1\">\r\n");
      out.write("			<div><img src=\"/images/");
      out.print(product.getProduct_image() );
      out.write("\" width=\"450\" height=\"600\" class=\"big_img\"></div>\r\n");
      out.write("			<div class=\"small_imgs\">\r\n");
      out.write("				<img src=\"/images/");
      out.print(product.getProduct_image() );
      out.write("\" width=\"60\" height=\"80\" class=\"thumb\">\r\n");
      out.write("				\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<form action=\"cart/cartInsertPro.jsp\" method=\"post\" name=\"contentForm\">\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<input type=\"hidden\" name=\"buyer\" value=\"");
      out.print(memberId );
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"memberId\" value=\"");
      out.print(memberId);
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"product_id\" value=\"");
      out.print(product_id);
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"product_name\" value=\"");
      out.print(product.getProduct_name());
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"brand\" value=\"");
      out.print(product.getBrand() );
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"product_size\" value=\"");
      out.print(product.getProduct_size());
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"product_weight\" value=\"");
      out.print(product.getProduct_weight());
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"product_price\" value=\"");
      out.print(product.getProduct_price() );
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"discount_rate\" value=\"");
      out.print(product.getDiscount_rate() );
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"buy_price\" value=\"");
      out.print(sale_price);
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"product_image\" value=\"");
      out.print(product.getProduct_image());
      out.write("\">\r\n");
      out.write("		<div class=\"s2\">\r\n");
      out.write("			<div class=\"s2_d1\">");
      out.print(product.getProduct_name() );
      out.write("</div>\r\n");
      out.write("			<div class=\"s2_d2\">\r\n");
      out.write("				<span>");
      out.print(product.getBrand() );
      out.write("&emsp;|&emsp;</span>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"s2_d3\"><span class=\"ss\">정가</span><span>");
      out.print(df.format(product.getProduct_price()) );
      out.write("원</span></div>\r\n");
      out.write("			<div class=\"s2_d4\"><span class=\"ss\">판매가</span><span><b>");
      out.print(df.format(sale_price) );
      out.write("</b>원</span></div>\r\n");
      out.write("			<div class=\"s2_d5\"><span class=\"ss\">할인율</span><span><b>");
      out.print(product.getDiscount_rate());
      out.write("%</b></span></div>\r\n");
      out.write("			<div class=\"s2_d6\"><span class=\"ss\">구매수량</span><input type=\"number\" name=\"buy_count\" id=\"buy_count\" value=\"1\" min=\"1\" max=\"99\"></div>\r\n");
      out.write("			<div class=\"s2_d7\"><span class=\"ss\">배송안내</span> <br><br>\r\n");
      out.write("			\r\n");
      out.write("				");
if(memberId != null) { 
      out.write("\r\n");
      out.write("				<span>");
      out.print(name );
      out.write("님의 주소로 <b>");
      out.print(d_day );
      out.write("</b>까지 배송됩니다.</span> <br><br>\r\n");
      out.write("				<span>주소 : <b>");
      out.print(address );
      out.write("</b></span>\r\n");
      out.write("				");
} else { 
      out.write("\r\n");
      out.write("				<span>\r\n");
      out.write("					배송일은 서울은 익일, 경기는 2일, 지방은 3일, 제주 및 도서 지역은 평균 5일이 소요됩니다.<br>\r\n");
      out.write("					단, 토/일, 공휴일은 배송일에서 제외됩니다.\r\n");
      out.write("				</span>\r\n");
      out.write("				");
} 
      out.write("\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"s2_d7\"><span class=\"ss\">배송비 </span>\r\n");
      out.write("			<span>\r\n");
      out.write("				무료 <br>\r\n");
      out.write("				제주도: 3,000원 / 도서산간: 3,000원\r\n");
      out.write("			</span>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"btns\">\r\n");
      out.write("				<input type=\"submit\" value=\"장바구니\" id=\"btn_cart\">\r\n");
      out.write("				<input type=\"button\" value=\"바로 구매\" id=\"btn_buy\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		</form>\r\n");
      out.write("		<hr class=\"t_line\">\r\n");
      out.write("		");
      out.write("\r\n");
      out.write("		<div class=\"s3\" id=\"s3\">\r\n");
      out.write("			<div class=\"s3_c1\"><span class=\"ss1\">상세설명</span><span class=\"ss2\">리뷰</span><span class=\"ss3\">상품문의</span><span class=\"ss4\">교환/반품</span></div>\r\n");
      out.write("			<div class=\"s3_c2\"><img src=\"/images/");
      out.print(product.getProduct_content() );
      out.write("\"></div>\r\n");
      out.write("			<div class=\"s3_c3\">\r\n");
      out.write("			");
for(ReviewDTO review : reviewList) {
      out.write("\r\n");
      out.write("			<div class=\"s3_review\">\r\n");
      out.write("				<div class=\"s3_r1\">\r\n");
      out.write("					<div class=\"s3_subject\">");
      out.print(review.getSubject() );
      out.write("</div>\r\n");
      out.write("					<div class=\"s3_content\">");
      out.print(review.getContent() );
      out.write("</div>\r\n");
      out.write("					<div class=\"s3_content_all\">내용 전체 보기∨</div>\r\n");
      out.write("					<div class=\"s3_content_part\">내용접기</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"s3_r2\">\r\n");
      out.write("					<div>작성자: ");
      out.print(review.getMember_id() );
      out.write("</div>\r\n");
      out.write("					<div>등록일: ");
      out.print(sdf.format(review.getRegDate()) );
      out.write("</div>\r\n");
      out.write("					<div>조회수: ");
      out.print(review.getReadcount() );
      out.write("</div>\r\n");
      out.write("				</div>\r\n");
      out.write("			</div>\r\n");
      out.write("			");
} 
      out.write("\r\n");
      out.write("			   ");
      out.write("\r\n");
      out.write("			   <div id=\"paging\">\r\n");
      out.write("			   ");

			   if(cnt > 0) {
			      // 전체 페이지수 계산
			      int pageCount = cnt / pageSize + (cnt%pageSize==0? 0 : 1);
			      int startPage = 1; //시작페이지 번호
			      int pageBlock = 5; //페이징의 개수 
			      
			      // 시작 페이지 설정
			      if(currentPage % 5 != 0) startPage = (currentPage/5)*5 +1;
			      else startPage = (currentPage/5 -1) * 5 +1;
			         
			      // 끝 페이지 설정
			      int endPage = startPage + pageBlock - 1;
			      if(endPage > pageCount) endPage = pageCount;
			      
			      // 맨처음 페이지 이동 처리
			      if(startPage > 5) {
			         out.print("<a href='shopContent.jsp?pageNum=1&product_kind="+product_kind+"&product_id="+product_id+"#s3'><div id='pBox' class='pBox_b' title='첫 페이지'>"+"〈〈"+"</div></a>");
			      }
			      
			      // 이전 페이지 처리
			      if(startPage > 5 ) {
			         out.print("<a href='shopContent.jsp?pageNum="+(currentPage-5)+"&product_kind="+product_kind+"&product_id="+product_id+"#s3'><div id='pBox' class='pBox_b' title='이전 3페이지'>"+"〈"+"</div></a>");
			      }
			      // 페이징 블럭 출력 처리
			      for(int i=startPage; i<=endPage; i++) {
			         if(currentPage == i) { // 선택된 페이지가 현재 페이지일 때
			            out.print("<div id='pBox' class='pBox_c'>"+i+"</div>");
			         } else {      // 선택된 페이지가 다른 페이지일 떄 -> 이동에 대한 링크 설정
			            out.print("<a href='shopContent.jsp?pageNum=" + i+"&product_kind="+product_kind+"&product_id="+product_id+"#s3'><div id='pBox'>" + i + "</div></a>");   
			         }
			      }
			      
			      // 다음 페이지 처리 
			      if(endPage < pageCount) {
			         int movePage = currentPage + 5;
			         if(movePage > pageCount) movePage=pageCount;
			         out.print("<a href='shopContent.jsp?pageNum="+movePage+"&product_kind="+product_kind+"&product_id="+product_id+"#s3'><div id='pBox' class='pBox_b' title='다음 3페이지'>"+"〉"+"</div></a>");
			      }
			      
			      // 맨 끝 페이지 이동처리
			      if(endPage < pageCount) {
			         out.print("<a href='shopContent.jsp?pageNum="+pageCount+"&product_kind="+product_kind+"&product_id="+product_id+"#s3'><div id='pBox' class='pBox_b' title='끝 페이지'>"+"〉〉"+"</div></a>");
			      }
			   }
			   
      out.write("\r\n");
      out.write("			   </div>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "shopBottom.jsp", out, false);
      out.write("\r\n");
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
