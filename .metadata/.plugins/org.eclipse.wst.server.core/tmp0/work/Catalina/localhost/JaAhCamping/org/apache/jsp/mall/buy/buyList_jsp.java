/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-07-07 13:33:17 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mall.buy;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mall.buy.*;
import java.util.*;
import java.text.*;

public final class buyList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("mall.buy");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>최종구매확인폼</title>\r\n");
      out.write("<style>\r\n");
      out.write(".container { width: 1200px; margin: 0 auto;}\r\n");
      out.write(".buy_list { width: 100%;}\r\n");
      out.write("/* 상단1 */\r\n");
      out.write(".d1 { width: 100%; padding: 15px; margin: 15px auto; text-align: center;}\r\n");
      out.write(".d1 .s1 { font-size: 1.5em; font-weight: bold; }\r\n");
      out.write(".d1 .s2 { width: 300px; background: #333; color: #fff; z-index: 10; position: relative;}\r\n");
      out.write(".d1 .s3 { width: 300px; background: #fff; color: #333; margin-left: 0px; z-index: -10; position: relative;}\r\n");
      out.write("\r\n");
      out.write("/* 상단2 */\r\n");
      out.write(".d2 { width: 40%; padding: 15px; margin: 5px 45px; float: right; display: inline-block; text-align: right;}\r\n");
      out.write(".d_line { clear: both; width: 90%; border: 1px solid lightgray;}\r\n");
      out.write("\r\n");
      out.write("/* 중단 - d3(검색)*/\r\n");
      out.write(".d3 { width: 95%; text-align: right;}\r\n");
      out.write(".d3 .d3_1 { font-size: 1.1em; font-weight: bold; color: #32708d; text-align: right;}\r\n");
      out.write(".d3 .d3_2 { margin-top: 10px;}\r\n");
      out.write(".d3 .d3_2 a { text-decoration: none; color: #32708d; font-size: 0.95em; font-weight: bold; font-size: 0.9em; text-align: center;\r\n");
      out.write("display: inline-block; width: 60px; height: 18px; padding: 5px; border: 1px solid #32708d; border-radius: 5px;}\r\n");
      out.write(".d3 .d3_3 { margin-top: 10px;}\r\n");
      out.write(".d3 .d3_3 input[type=date] { width: 150px; height: 22px; margin: 0 10px;}\r\n");
      out.write(".d3 .d3_3 input[type=button] { width: 80px; height: 28px; border: none; background: #32708d; color: #fff; font-size: 0.9em;\r\n");
      out.write("border-radius: 5px; cursor: pointer;}\r\n");
      out.write("/* 중단 - d4(구매목록) */\r\n");
      out.write(".d4 { margin-bottom: 50px;}\r\n");
      out.write(".d4 .t1 { width: 90%; border: 1px solid gray; border-collapse: collapse; margin: 0 auto; font-size: 0.9em; \r\n");
      out.write("border-left: none; border-right: none; clear: both;}\r\n");
      out.write(".d4 .t1 tr { height: 40px;}\r\n");
      out.write(".d4 .t1 td, .d4 .t1 th { border-top: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; border-left: none; border-right: none;}\r\n");
      out.write(".d4 .t1 th { background: #1e94be; color: #fff; text-shadow: 1px 1px 1px gray;}\r\n");
      out.write(".left { text-align: left; padding-left: 10px;}\r\n");
      out.write(".right { text-align: right; padding-right: 30px;}\r\n");
      out.write(".center { text-align: center; padding: 5px;}\r\n");
      out.write(".t1 .s1 a { text-decoration: none; color: gray; font-weight: bold;}\r\n");
      out.write(".t1 .s2 a { text-decoration: none; color: #32708d; font-weight: bold;}\r\n");
      out.write(".t1 .s2 b { color: #f00;}\r\n");
      out.write(".t1 .s22 { color: #f00; font-weight: bold;}\r\n");
      out.write(".t1 .s3 { color: #99424f; font-weight: bold; font-size: 1.05em;}\r\n");
      out.write(".t1 .s4 { color: #1e9faa; font-weight: bold;}\r\n");
      out.write(".t1 .s5 { color: #1e94be; font-weight: bold;}\r\n");
      out.write(".t1 .s6, .t1 .s7 { margin-top: 5px;}\r\n");
      out.write(".t1 .s6 input, .t1 .s7 input { width: 70px; height: 25px; border-radius: 3px; border: none; font-weight: bold; font-size: 0.8em;\r\n");
      out.write("cursor: pointer;}\r\n");
      out.write(".t1 .s6 input { background: #32708d; color: #fff;}\r\n");
      out.write(".t1 .s7 input { background: #2f9e77; color: #fff;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("	document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("		let period1 = document.getElementById(\"period1\");\r\n");
      out.write("		let period2 = document.getElementById(\"period2\");\r\n");
      out.write("		let btn_search = document.getElementById(\"btn_search\");\r\n");
      out.write("		btn_search.addEventListener(\"click\", function() {\r\n");
      out.write("			location = \"buyList.jsp?period1=\" + period1.value + \"&period2=\" + period2.value;\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		// 날짜 검색란의 기본값을 오늘 날짜로 설정\r\n");
      out.write("		period1.value = new Date().toISOString().slice(0, 10);\r\n");
      out.write("		period2.value = new Date().toISOString().slice(0, 10);\r\n");
      out.write("	})\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

request.setCharacterEncoding("utf-8");
String memberId = (String)session.getAttribute("memberId");

if(memberId == null) { 
	out.print("<script>alert('로그인을 해주세요.');");
	out.print("location='../logon/memberLoginForm.jsp';</script>");
	return;
}

// ##########

String period1 = "";
String period2 = "";
BuyDAO buyDAO = BuyDAO.getInstance();
List<BuyDTO> buyList = buyDAO.getBuyList(memberId);

if(request.getParameter("period1") != null) {
	period1 = request.getParameter("period1");
	period2 = request.getParameter("period2");
	
	// 오늘 날짜
	Calendar c = Calendar.getInstance();
	int year = c.get(Calendar.YEAR);
	int month = c.get(Calendar.MONTH) + 1;
	int date = c.get(Calendar.DATE);
	String now = year + "-" + (month<10 ? "0"+month : month) + "-" + date;
	System.out.println("now: " + now);

	// now, one_week, two_week, one_month, two_month, three_month, six_month, one_year, two_year
	String[] sep = { "day", "day", "day", "month", "month", "month", "month", "year", "year"};
	int[] p1 = {0, -7, -14, -1, -2, -3, -6, -1, -2};
	String[] days = new String[9];

	for(int i=0; i<p1.length; i++) {
		c = Calendar.getInstance();
		switch(sep[i]) {
		case "day": c.add(Calendar.DATE, p1[i]); break;
		case "month": c.add(Calendar.MONTH, p1[i]); break;
		case "year": c.add(Calendar.YEAR, p1[i]); break;
		}
		year = c.get(Calendar.YEAR);
		month = c.get(Calendar.MONTH) + 1;
		date = c.get(Calendar.DATE);
		days[i] = year + "-" + (month<10 ? "0"+month : month) + "-" + (date<10 ? "0"+date : date);
		//System.out.println("days[" + i + "]: " + days[i]);
	}

	switch(period1) {
	case "one_day": period1 = days[0];  break;
	case "one_week": period1 = days[1];  break;
	case "two_week": period1 = days[2];  break;
	case "one_month": period1 = days[3];  break;
	case "two_month": period1 = days[4];  break;
	case "three_month": period1 = days[5];  break;
	case "six_month": period1 = days[6];  break;
	case "one_year": period1 = days[7];  break;
	case "two_year": period1 = days[8];  break;
	}

	if(period2.equals("now")) period2 = now;
	buyList = buyDAO.getBuyListSearch(period1, period2, memberId);
	System.out.println("구매처리(검색)");
} 

// ##########

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
DecimalFormat df = new DecimalFormat("#,###,###");

int tot1 = 0, tot2 = 0, cnt = 0;
String order_id = "";

/*
for(BuyDTO buy : buyList) {
	System.out.println("buyList :" + buy);
}
*/

      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../shopTop.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"buy_list\">\r\n");
      out.write("		<div class=\"d1\">\r\n");
      out.write("			<span class=\"s1\">자아캠핑 주문내역</span>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"d2\">\r\n");
      out.write("			<span>01장바구니</span> > <span>02주문서작성/결제</span> > <span><b>03주문완료</b></span>\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr class=\"d_line\">\r\n");
      out.write("		<div class=\"d3\"> <!-- 날짜별 구매정보 검색 -->\r\n");
      out.write("			<div class=\"d3_1\">구매 목록 검색</div>\r\n");
      out.write("			<div class=\"d3_2\">\r\n");
      out.write("				<a href=\"buyList.jsp?period1=one_day&period2=now\">오늘</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=one_week&period2=now\">1주일</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=two_week&period2=now\">2주일</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=one_month&period2=now\">1개월</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=two_month&period2=now\">2개월</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=three_month&period2=now\">3개월</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=six_month&period2=now\">6개월</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=one_year&period2=now\">1년</a>\r\n");
      out.write("				<a href=\"buyList.jsp?period1=two_year&period2=now\">2년</a>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"d3_3\">\r\n");
      out.write("				<input type=\"date\" id=\"period1\"> ~ <input type=\"date\" id=\"period2\"> \r\n");
      out.write("				<input type=\"button\" value=\"검색\" id=\"btn_search\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("		<hr class=\"d_line\">\r\n");
      out.write("		<div class=\"d4\"> <!-- 구매 정보 -->\r\n");
      out.write("			<table class=\"t1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th width=\"18%\">주문일자(주문번호)</th>\r\n");
      out.write("					<th colspan=2 width=\"45%\">주문상품</th>\r\n");
      out.write("					<th width=\"12%\">구매금액</th>\r\n");
      out.write("					<th width=\"10%\">배송비</th>\r\n");
      out.write("					<th width=\"15%\">주문상태</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");
if(buyList.size() == 0) {
      out.write("\r\n");
      out.write("				<tr><td colspan=\"6\" class=\"center\">구매 내역이 없습니다.</td></tr>\r\n");
      out.write("				");
} else {
				for(BuyDTO buy : buyList) {
					tot1 = buy.getBuy_price() * buy.getBuy_count();
					tot2 += tot1;
					String buy_id = buy.getBuy_id();
					cnt = buyDAO.getBuyIdCount(buy_id);
					
					// 같은 구매번호는 1건만 표시
					if(!order_id.equals(buy_id)) {
						order_id = buy_id;
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"center\">\r\n");
      out.write("						<span class=\"s1\"><a href=\"buyDetail.jsp?buy_id=");
      out.print(buy.getBuy_id());
      out.write('"');
      out.write('>');
      out.print(sdf.format(buy.getBuy_date()) );
      out.write("<br>(");
      out.print(buy.getBuy_id() );
      out.write(")</a></span>\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"8%\" class=\"left\">\r\n");
      out.write("						<a href=\"buyDetail.jsp?buy_id=");
      out.print(buy.getBuy_id());
      out.write("\"><img src=\"/images/");
      out.print(buy.getProduct_image() );
      out.write("\" width=\"60\" height=\"90\"></a>\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"37%\" class=\"left\">\r\n");
      out.write("						<span class=\"s2\"><a href=\"buyDetail.jsp?buy_id=");
      out.print(buy.getBuy_id());
      out.write('"');
      out.write('>');
      out.print(buy.getProduct_name() );
      out.write(" <b>(총 ");
      out.print(cnt );
      out.write("종)</b></a></span>\r\n");
      out.write("					</td>\r\n");
      out.write("					<td class=\"right\"><span class=\"s3\">");
      out.print(df.format(tot2) );
      out.write("원</span></td>\r\n");
      out.write("					<td class=\"center\"><span class=\"s4\">무료</span></td>\r\n");
      out.write("					<td class=\"center\">\r\n");
      out.write("						<div class=\"s5\">");
      out.print(buy.getDelivery_state() );
      out.write("</div>\r\n");
      out.write("						<div class=\"s6\"><input type=\"button\" class=\"btn_delivery\" value=\"배송조회\"></div>\r\n");
      out.write("						<div class=\"s7\"><input type=\"button\" class=\"btn_review\" value=\"리뷰작성\"></div>	\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");
} } }
      out.write("\r\n");
      out.write("			</table>\r\n");
      out.write("			\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../shopBottom.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
