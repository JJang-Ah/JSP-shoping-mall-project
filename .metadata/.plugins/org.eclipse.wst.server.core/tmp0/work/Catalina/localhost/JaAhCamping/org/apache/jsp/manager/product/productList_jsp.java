/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-06-06 11:43:20 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.manager.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.text.*;
import manager.product.*;
import java.util.*;

public final class productList_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("manager.product");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상품 목록</title>\r\n");
      out.write("<style>\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Do+Hyeon&family=Hammersmith+One&family=Paytone+One&display=swap');\r\n");
      out.write("#container { width: 1200px; margin: 0 auto;}\r\n");
      out.write("a { text-decoration: none; color: black;}\r\n");
      out.write("\r\n");
      out.write("/* 상단 - 메인, 서브 타이틀 */\r\n");
      out.write(".m_title { font-family:'Paytone One', sans-serif; font-size: 3em; text-align: center;}\r\n");
      out.write(".s_title { font-family:'Do Hyeon', sans-serif; font-size: 2em; text-align: center; margin-bottom: 30px}\r\n");
      out.write("\r\n");
      out.write("/* 상단 - 전체 상품수, 아이디, 로그아웃, 상품등록*/\r\n");
      out.write(".top_info { margin-bottom: 10px; text-align: right;}\r\n");
      out.write(".c_cnt { float: left;}\r\n");
      out.write(".c_cnt, .c_managerId { color: #59637f; font-size: 0.95em; font-weight: bold;}\r\n");
      out.write(".c_managerId { clear: both;}\r\n");
      out.write(".c_logout a { color: #99424f;}\r\n");
      out.write("\r\n");
      out.write("/* 상단 - 검색 */\r\n");
      out.write(".top_search { margin-bottom: 10px;}\r\n");
      out.write(".c_select { width: 155px; height: 25px;}\r\n");
      out.write(".c_input { width: 200px; height: 20px;}\r\n");
      out.write(".c_submit { width: 82px; height: 27px; border: none; background: #000; color: #fff;\r\n");
      out.write("    font-size: 0.8em; border-radius: 5px; font-weight: bold; cursor: pointer;}\r\n");
      out.write(".c_submit:hover { background: #fff; color: #000; border: 1px solid black;}\r\n");
      out.write("/* 중단 - 상품 정보 테이블 */\r\n");
      out.write(".a_table { width: 100%; border: 1px solid lightgray; border-collapse: collapse; font-size: 0.9em; border-radius: 10px;}\r\n");
      out.write("tr { height: 150px;}\r\n");
      out.write("#a_table_top { height: 70px;}\r\n");
      out.write("/* tr:nth-child(2n) { background: #e9ecef;} */\r\n");
      out.write("tr:nth-child(2n+1) { background: #f8f9fa;}\r\n");
      out.write("th, td { border: 1px solid lightgray;}\r\n");
      out.write("th { background: #dee2e6;}\r\n");
      out.write(".center { text-align: center;}\r\n");
      out.write(".left { text-align: left; padding-left: 2px;}\r\n");
      out.write(".right { text-align: right; padding-right: 5px;}\r\n");
      out.write(".img_update:hover { content: url('../../icons/update2.png');}\r\n");
      out.write(".img_delete:hover { content: url('../../icons/delete2.png');}\r\n");
      out.write(".f_row { text-align: center; font-weight: bold; color: #c84557;}\r\n");
      out.write("\r\n");
      out.write("/* 하단 - 페이징 영역*/\r\n");
      out.write("#paging { text-align: center; margin-top: 20px;}\r\n");
      out.write("#pBox { display: inline-block; width: 22px; height: 22px; padding: 5px; margin: 5px;}\r\n");
      out.write("#pBox:hover { background: #495057; color: white; font-weight: bold; border-radius: 10px;}\r\n");
      out.write(".pBox_c { background: #495057; color: white; font-weight: bold; border-radius: 10px;}\r\n");
      out.write(".pBox_b { font-weight: 900;}\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

request.setCharacterEncoding("utf-8");

String managerId = (String)session.getAttribute("managerId");
if(managerId == null) {
   out.print("<script>location='../logon/managerLoginForm.jsp';</script>");
}

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
DecimalFormat df = new DecimalFormat("#,###,###");
String product_kindName = "";


//################ 페이징(paging) 처리 
//페이징(paging) 처리를 위한 변수 선언
int pageSize = 10; // 1페이지에 10건의 게시글을 표시
String pageNum = request.getParameter("pageNum");
if(pageNum == null) pageNum = "1";

int currentPage = Integer.parseInt(pageNum); // 현재 페이지
int startRow = (currentPage -1) * pageSize + 1; // 현재 페이지의 첫번째 행
int endRow = currentPage * pageSize;    // 현재 페이지의 마지막 행

//################

// 검색 서치 - 검색일떄는 search가 1이고, 검색이 아닐떄는 search가 0
String search = request.getParameter("search");
String s_search = "";
String i_search = "";
if(search == null) {
   search = "0";
} else {
   s_search = request.getParameter("s_search");
   i_search = request.getParameter("i_search");
}



// DB 연결, 질의 처리
ProductDAO productDAO = ProductDAO.getInstance();

// 전체 상품수 조회
int cnt = 0;

// 전체 상품 조회 - paging 처리한 상품 목록, 검색 처리(search가 1이면 검색, search가 0이면 검색이 아님)
List<ProductDTO> productList = null;
if(search.equals("1")) {
   productList = productDAO.getProductList(startRow, pageSize, s_search, i_search);
   cnt = productDAO.getProductCount(s_search, i_search);
} else if(search.equals("0")){
   productList = productDAO.getProductList(startRow, pageSize);
   cnt = productDAO.getProductCount();
}

//매 페이지마다 전체 상품수에 대한 역순 번호
int number = cnt - ((currentPage-1) * pageSize); 

      out.write("\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("	<div>\r\n");
      out.write("		");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../../mall/shopTop.jsp", out, false);
      out.write("\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("   ");
      out.write("\r\n");
      out.write("   <div class=\"title\"><a href=\"../managerMain.jsp\">자아캠핑 관리자 페이지</a></div>\r\n");
      out.write("   <div class=\"s_title\"><a href=\"productList.jsp\">상품 목록</a></div>\r\n");
      out.write("   \r\n");
      out.write("   ");
      out.write("\r\n");
      out.write("   <div class=\"top_info\">\r\n");
      out.write("      <span class=\"c_cnt\">전체 상품수: ");
      out.print(cnt );
      out.write("개</span>\r\n");
      out.write("      <span class=\"c_managerId\">");
      out.print(managerId );
      out.write("님(관리자)</span>&emsp;|&emsp;\r\n");
      out.write("      <span class=\"c_logout\"><a href=\"../logon/managerLogout.jsp\">로그아웃</a></span>&emsp;|&emsp;\r\n");
      out.write("      <span class=\"c_register_product\"><a href=\"productRegisterForm.jsp\">상품등록</a></span>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   ");
      out.write("\r\n");
      out.write("   <div class=\"top_search\">\r\n");
      out.write("      <form action=\"productList.jsp\" method=\"post\" name=\"searchForm\">\r\n");
      out.write("      <input type=\"hidden\" name=\"search\" value=\"1\">\r\n");
      out.write("      <span class=\"s_search1\">\r\n");
      out.write("         <select name=\"s_search\" class=\"c_select\">\r\n");
      out.write("            <option selected>이름</option>\r\n");
      out.write("            <option>브랜드</option>\r\n");
      out.write("         </select>\r\n");
      out.write("      </span>\r\n");
      out.write("      <span class=\"s_search2\"><input type=\"text\" name=\"i_search\" class=\"c_input\"></span>\r\n");
      out.write("      <span class=\"s_search3\"><input type=\"submit\" class=\"c_submit\" value=\"검색\"></span>\r\n");
      out.write("      </form>\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("   ");
      out.write("\r\n");
      out.write("   <table id=\"a_table\">\r\n");
      out.write("      <tr id=\"a_table_top\">\r\n");
      out.write("         <th width=\"4%\">No</th>\r\n");
      out.write("         <th width=\"9%\">분류</th>\r\n");
      out.write("         <th width=\"5%\">사진</th>\r\n");
      out.write("         <th width=\"20%\">이름</th>\r\n");
      out.write("         <th width=\"7%\">가격</th>\r\n");
      out.write("         <th width=\"5%\">재고</th>\r\n");
      out.write("         <th width=\"12%\">브랜드</th>\r\n");
      out.write("         <th width=\"12%\">사이즈</th>\r\n");
      out.write("         <th width=\"7%\">무게</th>\r\n");
      out.write("         <th width=\"4%\">할인율</th>\r\n");
      out.write("         <th width=\"7%\">등록일</th>\r\n");
      out.write("         <th width=\"8%\">수정|삭제</th>\r\n");
      out.write("      </tr>\r\n");
      out.write("      ");
 if(cnt == 0) { // 등록된 글이 없을 때  
         out.print("<tr><td colspan='13' class='f_row'>등록된 글이 없습니다.</td></tr>");
      } else {      // 등록된 글이 있을 때
         for(ProductDTO product : productList) {
            switch(product.getProduct_kind()) {
            case "110": product_kindName = "텐트"; break;
            case "120": product_kindName = "텐트관련품"; break;
            case "130": product_kindName = "타프"; break;
            case "140": product_kindName = "폴대/펙/스트링/스토퍼"; break;
            case "150": product_kindName = "공구"; break;
            case "160": product_kindName = "기타(텐트/타프)"; break;
            case "210": product_kindName = "의자"; break;
            case "220": product_kindName = "테이블"; break;
            case "230": product_kindName = "선반/수납기구"; break;
            case "240": product_kindName = "야전침대"; break;
            case "250": product_kindName = "퍼니쳐"; break;
            case "260": product_kindName = "기타(의자/테이블/침대)"; break;
            
            case "310": product_kindName = "버너"; break;
            case "320": product_kindName = "코펠"; break;
            case "330": product_kindName = "취사용품"; break;
            case "340": product_kindName = "식기류"; break;
            case "350": product_kindName = "기타(버너/코펠/취사용품)"; break;

            case "410": product_kindName = "랜턴"; break;
            case "420": product_kindName = "후레쉬"; break;
            case "430": product_kindName = "난로"; break;
            case "440": product_kindName = "액세서리"; break;
            case "450": product_kindName = "기타(랜턴/난로)"; break;
            case "460": product_kindName = "기타(의자/테이블/침대)"; break;
            
            case "510": product_kindName = "화로대"; break;
            case "520": product_kindName = "바베큐 그릴"; break;
            case "530": product_kindName = "토치"; break;
            case "540": product_kindName = "바베큐 소품"; break;
            case "550": product_kindName = "기타(화로/바베큐)"; break;

            case "610": product_kindName = "침낭"; break;
            case "620": product_kindName = "베개/쿠션/방석"; break;
            case "630": product_kindName = "매트"; break;
            case "640": product_kindName = "해먹"; break;
            case "650": product_kindName = "커버"; break;
            case "660": product_kindName = "기타(침낭/매트/해먹)"; break;
            
            }
      
      out.write("\r\n");
      out.write("      <tr>\r\n");
      out.write("         <td class=\"center\">");
      out.print(number-- );
      out.write("</td>   \r\n");
      out.write("         <td class=\"center\">");
      out.print(product_kindName );
      out.write("</td>   \r\n");
      out.write("         <td class=\"center\">\r\n");
      out.write("            <a href=\"productContent.jsp?product_id=");
      out.print(product.getProduct_id());
      out.write("&pageNum=");
      out.print(pageNum);
      out.write("\">\r\n");
      out.write("               <img src=");
      out.print("/images/" + product.getProduct_image());
      out.write(" width=\"35px\" height=\"50px\">\r\n");
      out.write("            </a>\r\n");
      out.write("         </td>   \r\n");
      out.write("         <td class=\"left\">\r\n");
      out.write("            <a href=\"productContent.jsp?product_id=");
      out.print(product.getProduct_id());
      out.write("&pageNum=");
      out.print(pageNum);
      out.write('"');
      out.write('>');
      out.print(product.getProduct_name() );
      out.write("</a>\r\n");
      out.write("         </td>   \r\n");
      out.write("         <td class=\"right\">");
      out.print(df.format(product.getProduct_price()) );
      out.write("원</td>\r\n");
      out.write("         <td class=\"right\">");
      out.print(df.format(product.getProduct_count()) );
      out.write("개</td>\r\n");
      out.write("         <td class=\"center\">");
      out.print(product.getBrand() );
      out.write("</td>  \r\n");
      out.write("         <td class=\"center\">");
      out.print(product.getProduct_size() );
      out.write("</td>   \r\n");
      out.write("         <td class=\"center\">");
      out.print(product.getProduct_weight() );
      out.write("</td>\r\n");
      out.write("         <td class=\"center\">");
      out.print(product.getDiscount_rate() );
      out.write("%</td>   \r\n");
      out.write("         <td class=\"center\">");
      out.print(sdf.format(product.getReg_date()) );
      out.write("</td>   \r\n");
      out.write("         <td class=\"center\">\r\n");
      out.write("            <a href=\"productContent.jsp?product_id=");
      out.print(product.getProduct_id() );
      out.write("&pageNum=");
      out.print(pageNum);
      out.write("\"><img src=\"../../icons/update1.png\" width=\"30\" class=\"img_update\"></a>&nbsp;&nbsp;\r\n");
      out.write("            <a href=\"productDeletePro.jsp?product_id=");
      out.print(product.getProduct_id() );
      out.write("&pageNum=");
      out.print(pageNum);
      out.write("\"><img src=\"../../icons/delete1.png\" width=\"30\" class=\"img_delete\"></a>\r\n");
      out.write("         </td>   \r\n");
      out.write("      </tr>\r\n");
      out.write("      ");
} }
      out.write("\r\n");
      out.write("   </table>\r\n");
      out.write("   \r\n");
      out.write("   ");
      out.write("\r\n");
      out.write("   <div id=\"paging\">\r\n");
      out.write("   ");

   if(cnt > 0) {
      // 전체 페이지수 계산
      int pageCount = cnt / pageSize + (cnt%pageSize==0? 0 : 1);
      int startPage = 1; //시작페이지 번호
      int pageBlock = 10; //페이징의 개수 
      
      // 시작 페이지 설정
      if(currentPage % 10 != 0) startPage = (currentPage/10)*10 +1;
      else startPage = (currentPage/10 -1) * 10 +1;
         
      // 끝 페이지 설정
      int endPage = startPage + pageBlock - 1;
      if(endPage > pageCount) endPage = pageCount;
      
      // 맨처음 페이지 이동 처리
      if(startPage > 10) {
         out.print("<a href='productList.jsp?pageNum=1&search="+search+"&s_search="+s_search+"&i_search="+i_search+"'><div id='pBox' class='pBox_b' title='첫 페이지'>"+"〈〈"+"</div></a>");
      }
      
      // 이전 페이지 처리
      if(startPage > 10 ) {
         out.print("<a href='productList.jsp?pageNum="+(currentPage-10)+"&search="+search+"&s_search="+s_search+"&i_search="+i_search+"'><div id='pBox' class='pBox_b' title='이전 10페이지'>"+"〈"+"</div></a>");
      }
      // 페이징 블럭 출력 처리
      for(int i=startPage; i<=endPage; i++) {
         if(currentPage == i) { // 선택된 페이지가 현재 페이지일 때
            out.print("<div id='pBox' class='pBox_c'>"+i+"</div>");
         } else {      // 선택된 페이지가 다른 페이지일 떄 -> 이동에 대한 링크 설정
            out.print("<a href='productList.jsp?pageNum=" + i + "&search=" + search+"&s_search="+s_search+"&i_search="+i_search+"'><div id='pBox'>" + i + "</div></a>");   
         }
      }
      
      // 다음 페이지 처리 
      if(endPage < pageCount) {
         int movePage = currentPage + 10;
         if(movePage > pageCount) movePage=pageCount;
         out.print("<a href='productList.jsp?pageNum="+movePage+"&search="+search+"&s_search="+s_search+"&i_search="+i_search+"'><div id='pBox' class='pBox_b' title='다음 10페이지'>"+"〉"+"</div></a>");
      }
      
      // 맨 끝 페이지 이동처리
      if(endPage < pageCount) {
         out.print("<a href='productList.jsp?pageNum="+pageCount+"&search="+search+"&s_search="+s_search+"&i_search="+i_search+"'><div id='pBox' class='pBox_b' title='끝 페이지'>"+"〉〉"+"</div></a>");
      }
   }
   
      out.write("\r\n");
      out.write("   </div>\r\n");
      out.write("   \r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
