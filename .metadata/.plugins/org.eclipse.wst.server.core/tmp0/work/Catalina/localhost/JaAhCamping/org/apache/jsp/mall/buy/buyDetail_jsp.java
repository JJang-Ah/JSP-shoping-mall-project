/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.62
 * Generated at: 2022-07-07 13:36:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mall.buy;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import mall.buy.*;
import java.util.*;
import java.text.*;

public final class buyDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("java.text");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("mall.buy");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>구매아이디별 상세보기</title>\r\n");
      out.write("<style>\r\n");
      out.write(".container { width: 1200px; margin: 0 auto;}\r\n");
      out.write(".buy_detail { width: 100%;}\r\n");
      out.write("/* d1 - 상품 상세 보기 */\r\n");
      out.write(".d1 { margin-bottom: 50px;}\r\n");
      out.write(".d1 .t1 { width: 90%; border: 1px solid gray; border-collapse: collapse; margin: 0 auto; font-size: 0.9em; \r\n");
      out.write("border-left: none; border-right: none; clear: both;}\r\n");
      out.write(".d1 .t1 tr { height: 40px;}\r\n");
      out.write(".d1 .t1 td, .d1 .t1 th { border-top: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; border-left: none; border-right: none;}\r\n");
      out.write(".d1 .t1 th { background: #f1f1f1; color: #333333; text-shadow: 1px 1px 1px gray;}\r\n");
      out.write(".left { text-align: left; padding-left: 10px;}\r\n");
      out.write(".right { text-align: right; padding-right: 30px;}\r\n");
      out.write(".center { text-align: center; padding: 5px;}\r\n");
      out.write(".t1 .s1 { color: gray; font-weight: bold;}\r\n");
      out.write(".t1 .s3 a { text-decoration: none; color: #32708d; font-weight: bold;}\r\n");
      out.write(".t1 .s4, .t1 .s5 { color: #c84557; font-weight: bold;}\r\n");
      out.write(".t1 .s6 { color: #99424f; font-weight: bold; font-size: 1.2em;}\r\n");
      out.write(".t1 .s7 { color: #1e9faa; font-weight: bold;}\r\n");
      out.write("/* d2 - 총 구매 정보 */\r\n");
      out.write(".d2 { margin-bottom: 50px;}\r\n");
      out.write(".d2 .t2 { width: 90%; border: 1px solid gray; border-collapse: collapse; margin: 0 auto; font-size: 0.9em; \r\n");
      out.write("border-left: none; border-right: none; clear: both;}\r\n");
      out.write(".d2 .t2 tr { height: 40px;}\r\n");
      out.write(".d2 .t2 td, .d2 .t2 th { border-top: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; border-left: none; border-right: none;}\r\n");
      out.write(".d2 .t2 th { background: #f1f1f1; color: #333333; text-shadow: 1px 1px 1px gray;}\r\n");
      out.write(".center { text-align: center; padding: 5px;}\r\n");
      out.write(".t2 tr:nth-of-type(2) { height: 100px;}\r\n");
      out.write(".t2 .s1 { font-size: 1.2em; color: #32708d; font-weight: bold;}\r\n");
      out.write(".t2 .s2 { font-size: 1.3em; color: #99424f; font-weight: bold;}\r\n");
      out.write(".t2 input[type=button] { width: 120px; height: 40px; background: #2f9e77; color: #fff; font-weight: bold; font-size: 1.1em;\r\n");
      out.write("border-radius: 5px; border: none; cursor: pointer;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("	document.addEventListener(\"DOMContentLoaded\", function() {\r\n");
      out.write("		let btn_buy_list = document.getElementById(\"btn_buy_list\");\r\n");
      out.write("		btn_buy_list.addEventListener(\"click\", function() {\r\n");
      out.write("			location = 'buyList.jsp';\r\n");
      out.write("		})\r\n");
      out.write("	})\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

request.setCharacterEncoding("utf-8");
String memberId = (String)session.getAttribute("memberId");

if(memberId == null) { 
	out.print("<script>alert('로그인을 해주세요.');");
	out.print("location='../logon/memberLoginForm.jsp';</script>");
	return;
}

SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
DecimalFormat df = new DecimalFormat("#,###,###");

String buy_id = request.getParameter("buy_id");
BuyDAO buyDAO = BuyDAO.getInstance();
List<BuyDTO> buyListDetail = buyDAO.getBuyListDetail(buy_id);

int tot1 = 0, tot2 = 0;
int cnt1 = buyListDetail.size();
int cnt2 = 0;

/*
for(BuyDTO buy : buyListDetail) {
	System.out.println(buy);
}
*/

      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../shopTop.jsp", out, false);
      out.write("\r\n");
      out.write("	<div class=\"buy_detail\">\r\n");
      out.write("		<div class=\"d1\">\r\n");
      out.write("			<table class=\"t1\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th width=\"18%\">주문일자(주문번호)</th>\r\n");
      out.write("					<th colspan=\"2\" width=\"37%\">주문상품정보</th>\r\n");
      out.write("					<th width=\"10%\">구매금액</th>\r\n");
      out.write("					<th width=\"10%\">구매수량</th>\r\n");
      out.write("					<th width=\"10%\">총금액</th>\r\n");
      out.write("					<th width=\"15%\">주문상태</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");
for(BuyDTO buy : buyListDetail) {
					tot1 = buy.getBuy_price() * buy.getBuy_count();
					tot2 += tot1;
					cnt2 += buy.getBuy_count();
				
      out.write("\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"center\">\r\n");
      out.write("						<span class=\"s1\">");
      out.print(sdf.format(buy.getBuy_date()) );
      out.write("<br>(");
      out.print(buy.getBuy_id() );
      out.write(")</span>\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"8%\" class=\"left\">\r\n");
      out.write("						<span class=\"s2\"><a href=\"../shopContent.jsp?product_id=");
      out.print(buy.getProduct_id());
      out.write("\"><img src=\"/images/");
      out.print(buy.getProduct_image() );
      out.write("\" width=\"60\" height=\"90\"></a></span>\r\n");
      out.write("					</td>\r\n");
      out.write("					<td width=\"29%\" class=\"left\"><span class=\"s3\"><a href=\"../shopping/shopContent.jsp?product_id=");
      out.print(buy.getProduct_id());
      out.write('"');
      out.write('>');
      out.print(buy.getProduct_name() );
      out.write("</a></span></td>\r\n");
      out.write("					<td class=\"right\"><span class=\"s4\">");
      out.print(df.format(buy.getBuy_price()) );
      out.write("원</span></td>\r\n");
      out.write("					<td class=\"center\"><span class=\"s5\">");
      out.print(buy.getBuy_count() );
      out.write("개</span></td>\r\n");
      out.write("					<td class=\"center\"><span class=\"s6\">");
      out.print(df.format(tot1) );
      out.write("원</span></td>\r\n");
      out.write("					<td class=\"center\"><span class=\"s7\">");
      out.print(buy.getDelivery_state() );
      out.write("</span></td>\r\n");
      out.write("				</tr>\r\n");
      out.write("				");
} 
      out.write("\r\n");
      out.write("			</table>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"d2\">\r\n");
      out.write("			<table class=\"t2\">\r\n");
      out.write("				<tr>\r\n");
      out.write("					<th colspan=\"3\">구매 정보 확인</th>\r\n");
      out.write("				</tr>\r\n");
      out.write("				<tr>\r\n");
      out.write("					<td class=\"center\" width=\"40%\">\r\n");
      out.write("						<span class=\"s1\">구매 상품 종류: ");
      out.print(cnt1 );
      out.write("건<br>구매 상품 수량: ");
      out.print(cnt2 );
      out.write("개</span></td>\r\n");
      out.write("					<td class=\"center\" width=\"40%\"><span class=\"s2\">총 구매 금액: ");
      out.print(df.format(tot2) );
      out.write("원</span></td>\r\n");
      out.write("					<td class=\"center\" width=\"20%\">\r\n");
      out.write("						<input type=\"button\" id=\"btn_buy_list\" value=\"구매 목록\">\r\n");
      out.write("					</td>\r\n");
      out.write("				</tr>\r\n");
      out.write("			</table>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("	");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../shopBottom.jsp", out, false);
      out.write("\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
